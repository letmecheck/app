<h2 class="text-center">
  <% if !@game.black_player_id.nil? %>
    <%= @white_player.email %> vs <%= @black_player.email %>
  <% else %>
    <%= @white_player.email %> vs Someone
  <% end %>
</h2>

<div class="col-xs-10 col-xs-offset-1">
  <%= link_to "Concede the Game", concede_game_path(@game, conceding_user: current_user.id), class: 'btn btn-primary pull-left', remote: true %>
  
  <div id="changeable_button">
    <%= link_to "Suggest a draw", draw_game_path(@game, draw_requesting_user: current_user.id), class: 'btn btn-primary draw-btn pull-right', remote: true %>
  </div>
</div>

<div class="container table-surface">
  <div class="player-turn text-center"></div>
  <div class="board-booyah-box col-lg-6 col-lg-offset-3 col-sm-10 
  col-sm-offset-1 col-xs-12" data-no-turbolink>
    <!-- pull in the board from a partial -->
    <%= render 'chess_board' %>
  </div>
</div>

<div class="container">
  <% if @game.black_player_id.nil? && @game.white_player_id != current_user.id %>
    <%= link_to "Join", game_path(@game), method: :patch, class: 'btn btn-primary' %>
  <% end %>
</div>

<br />

<!-- Execute the script that allows moving pieces on the board. -->
<script>
<% current_player_id = @game.white? ? @game.white_player_id : @game.black_player_id %>
  <% if current_user.id == current_player_id %>
    dragDrop();
  <% end %>
</script>

<!-- Enable automatic update of board when opponent moves -->
<script type="text/javascript" charset="utf-8">
  $(function() {
    <% if Rails.env.production? %>
      // Grab Pusher key from config vars auto-generated by
      // the Heroku Pusher addon.
      <% pusher_key = ENV['PUSHER_SOCKET_URL'][-20..-1] %>
      var pusher = new Pusher('<%= pusher_key %>');
    <% else %>
      // Grab Pusher key from local application.yml file.
      var pusher = new Pusher('<%= ENV['PUSHER_KEY'] %>');
    <% end %>
    var channel = pusher.subscribe('game-<%= @game.id %>');

    /*
    // Some useful debug msgs
    pusher.connection.bind('connecting', function() {
      console.log('Connecting to Pusher...');
    });
    pusher.connection.bind('connected', function() {
      console.log('Connected to Pusher!');
    });
    pusher.connection.bind('failed', function() {
      console.log('Connection to Pusher failed :(');
    });
    channel.bind('subscription_error', function(status) {
      console.log('Pusher subscription_error');
    });
    */

    channel.bind('move_made', function(data) {
      //window.location.reload(false);
      //if ( data.dest_x !== data.orig_x || data.orig_y !== data.dest_y ) {
        $.ajax({
          type: 'PATCH',
          url: data.piece_url,
          dataType: 'script',
          data: { piece: { x_coord: data.dest_x, y_coord: data.dest_y } }
        });
      // }
    });

    //when one player concedes the game, both players are redirected to a new page. The setTimeout is necessary for Chrome users (without it the redirect does not occur).The query string added at the end of the url allows the passing of data (the id of the player that conceded the game) via the url to be used in concede.html.erb
   channel.bind('game_conceded', function(data) {
    setTimeout(function(){
      window.location.href = '<%= @game.id %>' + '/concede' +'?conceding_player=' + data.player_id;}, 500);
    });

    //when  both players decide to draw the game, they are redirected to a new page. The setTimeout is necessary for Chrome users (without it the redirect does not occur)
   channel.bind('game_drawn', function(data) {
    setTimeout(function(){
      window.location.href = '<%= @game.id %>' + '/draw';},500);
    });

   //after one player suggests a draw, the message of the "draw" button is updated with the html of a partial
   channel.bind('draw_requested', function(data) {
    alert("A game draw request has been made.");
    $("#changeable_button").load(window.location.href + "/change_button_version #target");
  });

    /*
    //Absolutely awful hack to make messages display:
    <% piece = @game.pieces.take %>
    $.ajax({
      type: 'PATCH',
      url: '<%= piece_url(piece) %>',
      dataType: 'script',
      data: { piece: { x_coord: <%= piece.x_coord %>,
                       y_coord: <%= piece.y_coord %> } }
    });
    */
  });
</script>
